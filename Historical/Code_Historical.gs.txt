// --- Constants for Historical App ---
const HISTORICAL_DATA_SPREADSHEET_ID = "17yJlBgE0bybDe4s7rtjKCJveaM00yjqbu_RX48WwxuQ";
const ACTIVE_DATA_SPREADSHEET_ID = "1zULF5lL7NEOiTyaDYOzL-qPsox_qbY7S8C6nqynUzRg";
// For reading active config
const CONFIG_SHEET_NAME = "Config";
const HIST_ORDERS_SHEET_NAME = "Orders";
const HIST_INVENTORY_SHEET_NAME = "Inventory";
const HIST_COLLECTIONS_SHEET_NAME = "Collections";
const HIST_PRODUCTS_SHEET_NAME = "Products";

let historicalSS = null;
let histOrdersSheet = null;
let histInventorySheet = null;
let histCollectionsSheet = null;
let histProductsSheet = null;

const scriptCache = CacheService.getScriptCache();
const CACHE_EXPIRATION_SECONDS = 3600;
// 1 hour

const ORDERS_COL = {
    ORDER_ID: 1, COLLECTION_NAME: 2, SUBMITTED_DATE: 3, CONTACT: 4, STREET: 5, CITY: 6,
    STATE_RAW: 7, STATE_ABBR: 8, ZIP_RAW: 9, ZIP_FORMATTED: 10, EMAIL: 11, OWNER: 12,
    PREF1: 13, PREF2: 14, PREF3: 15, PREF4: 16, PREF5: 17, INSEAM: 18, UNAVAILABLE_NOTES: 19, GENERAL_NOTES: 20,
    OUTFITS_RAW_ORIGINAL: 21, OUTFIT_ORDERED: 22, DATE_ORDERED: 23, OMS_ID: 24, OMS_COST: 25, ORDER_ISSUE: 26,
    FULFILLMENT_STATUS: 27, PROMO_CODE: 28, LAST_UPDATED: 29, FLAG_NOTES: 30, SWAP: 31
};
const INV_HEADERS = {
  COLLECTION: "CollectionName", OUTFIT_NAME: "OutfitName", IMAGE_URL: "OutfitImageURL",
  PIECE_SEQ: "PieceSequence", PROD_NAME: "ProductName", PROD_SKU: "ProductSKU",
  COLOR: "Color", AVAIL_SIZES: "AvailableSizes", ETA: "ETA",
  SWAP_SKU: "SwapSKU", SWAP_SIZES: "SwapAvailableSizes", NOTES: "StockStatusNotes",
  IS_ACTIVE: "IsActive"
};
function testPing() {
  return "Server is responding to ping!";
}

function doGet(e) {
  Logger.log("HIST_VIEWER: doGet invoked.");
  try {
    initializeGlobalSheetHandles_Historical();
    if (!histCollectionsSheet) {
        Logger.log('HIST_VIEWER: doGet - CRITICAL FAILURE: histCollectionsSheet is NULL after initialization.');
        return HtmlService.createHtmlOutput('<p>Error: Core data source for collections is critically unavailable. (Ref: doGet-HCS-DBP-FAIL)</p>');
    }
    return HtmlService.createTemplateFromFile('Index_Historical')
        .evaluate()
        .setTitle('Fabletics - Historical Order Management')
        .addMetaTag('viewport', 'width=device-width, initial-scale=1');
  } catch (error) {
    Logger.log(`HIST_VIEWER: doGet - FATAL EXCEPTION: ${error.message}\n${error.stack}`);
    return HtmlService.createHtmlOutput(`<p>Fatal Error loading application: ${error.message}</p>`);
  }
}

function include(filename) {
  // If the file being requested is the stylesheet...
  if (filename === 'Stylesheet') {
    // ...call the function from the library using the correct identifier 'FIOSMain'.
    return FIOSMain.getStylesheetContent();
  }
  
  // For any other file, it will look locally.
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function initializeGlobalSheetHandles_Historical() {
  try {
    if (!historicalSS) {
        historicalSS = SpreadsheetApp.openById(HISTORICAL_DATA_SPREADSHEET_ID);
        if (!historicalSS) { Logger.log("HIST_VIEWER: ERROR - Failed to open Historical Spreadsheet. ID: " + HISTORICAL_DATA_SPREADSHEET_ID);
            historicalSS = null; return;
        }
    }
    histCollectionsSheet = historicalSS.getSheetByName(HIST_COLLECTIONS_SHEET_NAME);
    if (!histCollectionsSheet) Logger.log(`HIST_VIEWER: CRITICAL ERROR - Collections sheet "${HIST_COLLECTIONS_SHEET_NAME}" NOT FOUND.`);

    histOrdersSheet = historicalSS.getSheetByName(HIST_ORDERS_SHEET_NAME);
    if (!histOrdersSheet) Logger.log(`HIST_VIEWER: ERROR - Orders sheet "${HIST_ORDERS_SHEET_NAME}" not found.`);

    histInventorySheet = historicalSS.getSheetByName(HIST_INVENTORY_SHEET_NAME);
    if (!histInventorySheet) Logger.log(`HIST_VIEWER: ERROR - Inventory sheet "${HIST_INVENTORY_SHEET_NAME}" not found.`);

    histProductsSheet = historicalSS.getSheetByName(HIST_PRODUCTS_SHEET_NAME);
    if (!histProductsSheet) Logger.log(`HIST_VIEWER: WARNING - Products sheet "${HIST_PRODUCTS_SHEET_NAME}" not found (may be optional).`);
  } catch (e) {
    Logger.log(`HIST_VIEWER: initializeGlobalSheetHandles_Historical - CATASTROPHIC EXCEPTION: ${e.message}\nStack: ${e.stack}`);
    historicalSS = null; histCollectionsSheet = null;
    histOrdersSheet = null; histInventorySheet = null;
    histProductsSheet = null;
  }
}

function getInitialHistoricalAppData() {
    let collectionsArray = [];
    let functionError = null;
    try {
        if (!histCollectionsSheet) {
            initializeGlobalSheetHandles_Historical();
            if (!histCollectionsSheet) {
                Logger.log("HIST_VIEWER: getInitialHistoricalAppData - CRITICAL FAILURE: histCollectionsSheet STILL NULL after re-init.");
                return { error: true, message: "Fatal Server Error: Collections data source unavailable. (Ref: GIHAD-HCS-DBP-CRIT)", collections: [] };
            }
        }
        collectionsArray = getAllHistoricalCollections();
        if (!Array.isArray(collectionsArray)) {
             Logger.log("HIST_VIEWER: getAllHistoricalCollections did NOT return an array. Forcing empty. Type: " + (typeof collectionsArray));
             collectionsArray = [];
             functionError = "Server function (getAllHistoricalCollections) returned unexpected data type.";
        }
        
        // Fetch dropdown options from Active Config
        const statusOptions = getDropdownOptions('FulfillmentStatusOptions');
        const issueOptions = getDropdownOptions('OrderIssueOptions');
        
        const returnData = { 
          collections: collectionsArray, 
          statusOptions: statusOptions,
          issueOptions: issueOptions,
          isAuthorizedProcessor: true 
        };
        if (functionError) { returnData.error = true;
            returnData.message = functionError; }
        return returnData;
    } catch (e) {
        Logger.log(`HIST_VIEWER: getInitialHistoricalAppData - CATCH EXCEPTION: ${e.message}\nStack: ${e.stack}`);
        functionError = `Server exception: ${e.message}`;
        collectionsArray = [];
        return { error: true, message: functionError, collections: [] };
    }
}

function getDropdownOptions(optionType) {
    const cacheKey = `dropdownOptions_${optionType}_activeSS`;
    const cached = scriptCache.get(cacheKey);
    if (cached) { try { return JSON.parse(cached); } catch(e){ /* ignore */ } }

    try {
        const activeSS = SpreadsheetApp.openById(ACTIVE_DATA_SPREADSHEET_ID);
        const configSheet = activeSS.getSheetByName(CONFIG_SHEET_NAME);
        if (!configSheet) {
            Logger.log(`getDropdownOptions (for historical): Active Config sheet not found.`);
            return [];
        }
        const data = configSheet.getDataRange().getValues();
        const headers = data[0];
        const typeCol = headers.indexOf("SettingType") + 1;
        const valueCol = headers.indexOf("OptionValue") + 1;
        const styleCol = headers.indexOf("StyleInfo") + 1;
        const orderCol = headers.indexOf("DisplayOrder") + 1;

        if (typeCol === 0 || valueCol === 0) return [];
        let opts = data.slice(1)
                       .filter(r => r[typeCol - 1] === optionType && r[valueCol -1])
                       .map(r => ({
                            value: r[valueCol - 1],
         
                           style: styleCol > 0 ? r[styleCol-1] : null,
                            order: orderCol > 0 ? parseInt(r[orderCol - 1]) || 999 : 999
                       }));
        if (orderCol > 0) opts.sort((a, b) => a.order - b.order);
        opts = opts.map(({ order, ...rest }) => rest);
        scriptCache.put(cacheKey, JSON.stringify(opts), CACHE_EXPIRATION_SECONDS);
        return opts;
    } catch (e) {
        Logger.log(`HIST_VIEWER: Error getting options ${optionType} from Active Config: ${e.message}`);
        return [];
    }
}

function getAllHistoricalCollections() {
    if (!histCollectionsSheet) {
        initializeGlobalSheetHandles_Historical();
        if(!histCollectionsSheet){
             Logger.log('HIST_VIEWER: getAllHistoricalCollections - CRITICAL: histCollectionsSheet NULL. Returning empty.');
             return [];
        }
    }
    try {
        const lastRow = histCollectionsSheet.getLastRow();
        const lastCol = histCollectionsSheet.getLastColumn();
        if (lastRow <= 1) {
            return [];
        }
        const data = histCollectionsSheet.getRange(1, 1, lastRow, Math.max(1, lastCol)).getValues();
        const headersFromSheet = data[0].map(h => String(h || "").trim());
        const nameColIdx = headersFromSheet.map(h => h.toLowerCase()).indexOf("collectionname");
        if (nameColIdx === -1) {
             Logger.log(`HIST_VIEWER: CRITICAL - Header "CollectionName" NOT FOUND in historical "Collections". Headers: [${headersFromSheet.join(' | ')}]`);
             return [];
        }
        const collections = data.slice(1).map(row => {
            if (row.length > nameColIdx) {
                const collectionName = String(row[nameColIdx] || "").trim();
                if (collectionName) {
                    return { name: collectionName };
                 }
            }
          
           return null;
        }).filter(Boolean);
        collections.sort((a,b) => (a.name).localeCompare(b.name));
        return collections;
    } catch (e) {
        Logger.log(`HIST_VIEWER: getAllHistoricalCollections - CATCH EXCEPTION: ${e.message}\nStack: ${e.stack}`);
        return [];
    }
}

function getHistoricalFilteredOrders(collectionName, filters = {}, pageNumber = 1, pageSize = 100) {
  initializeGlobalSheetHandles_Historical();
  if (!histOrdersSheet) {
    Logger.log('getHistoricalFilteredOrders: Historical Orders sheet not initialized.');
    return { orders: [], totalOrderCount: 0, error: "Historical Orders data is not accessible." };
  }
  if (!collectionName) { return { orders: [], totalOrderCount: 0, error: "Collection name is required." };
  }

  pageNumber = parseInt(pageNumber) || 1;
  pageSize = parseInt(pageSize) || 100;
  
  const stockFilterType = filters.stockFilter || "all";
  let collectionInventoryForStockFilter = null;
  if (stockFilterType === "inStock" || stockFilterType === "partialOOS") {
      collectionInventoryForStockFilter = getHistoricalInventoryByCollection(collectionName);
      if (!collectionInventoryForStockFilter || collectionInventoryForStockFilter.length === 0) {
           return { orders: [], totalOrderCount: 0, pageNumber: pageNumber, pageSize: pageSize };
      }
  }

  try {
    const data = histOrdersSheet.getDataRange().getValues();
    const headers = data[0].map(h => String(h || "").trim());

    const allValidRows = data.slice(1).filter(row => {
        // Basic collection match
        if (row.length <= ORDERS_COL.COLLECTION_NAME -1 || row[ORDERS_COL.COLLECTION_NAME - 1] !== collectionName) return false;
        
        // --- Standard Text & Dropdown Filters ---
        if (filters.owner && row[ORDERS_COL.OWNER - 1]?.toString().toLowerCase() !== filters.owner.toLowerCase()) return false;
        if (filters.nameSearch && !row[ORDERS_COL.CONTACT - 1]?.toString().toLowerCase().includes(filters.nameSearch.toLowerCase())) return false;
         if (filters.emailSearch && !row[ORDERS_COL.EMAIL - 1]?.toString().toLowerCase().includes(filters.emailSearch.toLowerCase())) return false;
        if (filters.orderIssue && row[ORDERS_COL.ORDER_ISSUE - 1] !== filters.orderIssue) return false;

        // --- OMS Cost Filter ---
        if (filters.omsCost) {
            const omsCostValue = row[ORDERS_COL.OMS_COST - 1] ? parseFloat(row[ORDERS_COL.OMS_COST - 1]) : 0;
            if (filters.omsCost === 'yes' && (!omsCostValue || omsCostValue <= 0)) return false;
            if (filters.omsCost === 'no' && omsCostValue > 0) return false;
        }
        
        // --- Missing Last Name Filter ---
        if (filters.missingLastName === true) {
            const contactName = row[ORDERS_COL.CONTACT - 1]?.toString().trim() || "";
            if (contactName === "" || contactName.split(/\s+/).length > 1) return false;
        }

        // --- Stock Filter (only applies to 'Pending' orders) ---
        if (stockFilterType === "inStock" || stockFilterType === "partialOOS") {
            if (row[ORDERS_COL.FULFILLMENT_STATUS - 1] !== "Pending") return false;
            let orderMatchesStockCriteria = false;
            for (let i = 1; i <= 5; i++) { // Check up to 5 preferences
                const prefString = row[ORDERS_COL[`PREF${i}`] - 1];
                if (prefString) {
                    const stockStatus = FIOSMain.getOutfitStockStatus(collectionName, prefString, collectionInventoryForStockFilter);
                    if (stockFilterType === "inStock" && stockStatus.overallStatus === "Available") {
                        orderMatchesStockCriteria = true;
                        break;
                    }
                    if (stockFilterType === "partialOOS" && stockStatus.overallStatus === "Partial OOS") {
                        orderMatchesStockCriteria = true;
                        break;
                    }
                }
            }
            if (!orderMatchesStockCriteria) return false;
        } else {
            // Standard Status Filter (when not using a stock filter)
            if (filters.status && row[ORDERS_COL.FULFILLMENT_STATUS - 1] !== filters.status) return false;
        }
        
        // Exclude 'Remove' status unless it's the one being filtered for
        if (row[ORDERS_COL.FULFILLMENT_STATUS - 1] === 'Remove' && filters.status !== 'Remove') {
            return false;
        }

        // --- Date Filter ---
        if (filters.dateRangeStart || filters.dateRangeEnd) {
            const cellDateValue = row[ORDERS_COL.DATE_ORDERED - 1];
            if (!(cellDateValue instanceof Date)) return false;
            const orderDateUTC = new Date(Date.UTC(cellDateValue.getFullYear(), cellDateValue.getMonth(), cellDateValue.getDate()));
            if (filters.dateRangeStart) {
                const filterStartDateObj = new Date(filters.dateRangeStart);
                if (isNaN(filterStartDateObj.getTime()) || orderDateUTC.getTime() < filterStartDateObj.getTime()) return false;
            }
            if (filters.dateRangeEnd) {
                const filterEndDateObj = new Date(filters.dateRangeEnd);
                if (isNaN(filterEndDateObj.getTime()) || orderDateUTC.getTime() > filterEndDateObj.getTime()) return false;
            }
        }
        
        return true;
    });

    const totalOrderCount = allValidRows.length;
    const startIndex = (pageNumber - 1) * pageSize;
    const paginatedRows = allValidRows.slice(startIndex, startIndex + pageSize);
    const resultOrders = paginatedRows.map(row => {
        let dateOrderedString = row[ORDERS_COL.DATE_ORDERED-1];
        if (dateOrderedString instanceof Date) { dateOrderedString = Utilities.formatDate(dateOrderedString, historicalSS.getSpreadsheetTimeZone(), "MM/dd/yyyy"); }
        
        return {
            orderId: String(row[ORDERS_COL.ORDER_ID - 1] || ''), 
            contact: String(row[ORDERS_COL.CONTACT - 1] || ''),
            email: String(row[ORDERS_COL.EMAIL  - 1] || ''), 
            owner: String(row[ORDERS_COL.OWNER - 1] || ''),
            status: String(row[ORDERS_COL.FULFILLMENT_STATUS - 1] || 'N/A'), 
            dateOrdered: dateOrderedString || '---',
            outfitOrdered: String(row[ORDERS_COL.OUTFIT_ORDERED - 1] || '---'),
            omsId: String(row[ORDERS_COL.OMS_ID - 1] || '---')
        };
    
    });
    return { orders: resultOrders, totalOrderCount: totalOrderCount, pageNumber: pageNumber, pageSize: pageSize };
  } catch (e) {
    Logger.log(`HIST_VIEWER: Error in getHistoricalFilteredOrders for ${collectionName}: ${e.message}\n${e.stack}`);
    return { orders: [], totalOrderCount: 0, pageNumber: pageNumber, pageSize: pageSize, error: `Server error: ${e.message}` };
  }
}

function getHistoricalOrderDetails(orderId) {
    initializeGlobalSheetHandles_Historical();
    if (!histOrdersSheet || !orderId) {
        return null;
    }
    try {
        const ordersData = histOrdersSheet.getDataRange().getValues();
        const orderRowIndex = ordersData.findIndex(row => row[ORDERS_COL.ORDER_ID - 1] === orderId);
        if (orderRowIndex === -1) {
            return null;
        }

        const orderRow = ordersData[orderRowIndex];
        const collectionName = orderRow[ORDERS_COL.COLLECTION_NAME - 1];
        // Get historical inventory for stock checking
        const collectionInventory = getHistoricalInventoryByCollection(collectionName);
        const orderData = {};
        for (const key in ORDERS_COL) {
            const colIdx = ORDERS_COL[key] - 1;
            if (colIdx >= 0 && colIdx < orderRow.length) {
                let value = orderRow[colIdx];
                if (value instanceof Date) {
                    value = Utilities.formatDate(value, historicalSS.getSpreadsheetTimeZone(), "yyyy-MM-dd");
                }
                orderData[key.toLowerCase()] = value;
            } else {
                orderData[key.toLowerCase()] = "";
            }
        }

        const finalData = {
            OrderID: orderData.order_id,
            ContactNameForTitle: orderData.contact || 'N/A',
            COLLECTION_NAME: collectionName,
            Contact: orderData.contact, Email: orderData.email, Owner: orderData.owner,
            StreetAddress: orderData.street, City: orderData.city,
            StateAbbreviated: orderData.state_abbr, ZipFormatted: orderData.zip_formatted,
            INSEAM: orderData.inseam,
            OutfitUnavailableNotes: orderData.unavailable_notes,
            GeneralNotes: orderData.general_notes,
 
            OutfitsRawOriginal: orderData.outfits_raw_original,
            OutfitOrdered: orderData.outfit_ordered,
            DateOrdered: orderData.date_ordered,
            OMS_ID: orderData.oms_id, OMS_Cost: orderData.oms_cost,
            FulfillmentStatus: orderData.fulfillment_status, OrderIssue: orderData.order_issue,
            PromoCodeUsedDisplay: orderData.promo_code,
            Swap: orderData.swap,
     
             preferenceStockStatus: [] // To be populated below
        };
        if (collectionName) {
            for (let i = 1; i <= 5; i++) {
                const prefKey = `pref${i}`;
                const prefString = orderData[prefKey.toLowerCase()];
                if (prefString) {
                    // Re-use the main app's stock status logic by passing the historical inventory
                    const stock = FIOSMain.getOutfitStockStatus(collectionName, prefString, collectionInventory);
                    let imgUrl = "";
                    const outfitNameFromPref = prefString.match(/^(.*?)\s*\(/)?.[1].trim() ?? prefString.trim();
                    const inventoryOutfit = collectionInventory.find(inv => inv.name === outfitNameFromPref);
                    if (inventoryOutfit) imgUrl = inventoryOutfit.imageUrl || "";
                  
                    
                    stock.imageUrl = imgUrl;
                    stock.outfitActive = inventoryOutfit ? inventoryOutfit.isActive : true;
                    finalData.preferenceStockStatus.push(stock);
                }
            }
         }
        return finalData;

    } catch (e) 
    {
        Logger.log(`HIST_VIEWER: Error getting historical order details for ${orderId}: ${e.message}`);
        return null;
    }
}


function getHistoricalDashboardStats(collectionName) {
    initializeGlobalSheetHandles_Historical();
    if (!histOrdersSheet || !collectionName) {
        return { error: "Orders sheet or collection name not provided." };
    }
    
    const stats = {
        totalOrders: 0,
        statusCounts: {}
    };
    try {
        const data = histOrdersSheet.getDataRange().getValues();
        const headers = data[0];
        const collCol = headers.indexOf("CollectionName");
        const statusCol = headers.indexOf("FulfillmentStatus");

        if (collCol === -1 || statusCol === -1) {
            return { error: "Required columns not found in historical orders sheet." };
        }

        for (let i = 1; i < data.length; i++) {
            const row = data[i];
            // Filter for the selected collection
            if (row[collCol] === collectionName) {
                const status = row[statusCol] || 'Unknown';
                // Exclude "Remove" status from counts
                if (status !== 'Remove') {
                    stats.totalOrders++;
                    stats.statusCounts[status] = (stats.statusCounts[status] || 0) + 1;
                }
            }
        }
        return stats;
    } catch (e) {
        Logger.log(`HIST_VIEWER: Error in getHistoricalDashboardStats: ${e.message}`);
        return { error: e.message };
    }
}

function updateHistoricalOrder(orderDataFromClient) {
  initializeGlobalSheetHandles_Historical();
  if (!histOrdersSheet || !orderDataFromClient || !orderDataFromClient.OrderID) {
    return { success: false, message: "Invalid request or missing OrderID." };
  }

  const lock = LockService.getScriptLock();
  let lockAcquired = false;
  try {
    lockAcquired = lock.tryLock(15000);
    if (!lockAcquired) {
      return { success: false, message: "Could not update now (concurrent edit). Please try again." };
    }

    const data = histOrdersSheet.getDataRange().getValues();
    const headers = data[0];
    const idColSheet = headers.indexOf("OrderID");
    const rowIndexInSheetData = data.findIndex(row => row[idColSheet] === orderDataFromClient.OrderID);

    if (rowIndexInSheetData === -1) {
      return { success: false, message: `Order ${orderDataFromClient.OrderID} not found in historical data.` };
    }

    const actualSheetRowIndex = rowIndexInSheetData + 1;
    const updatesToApply = {};
    
    // UPDATED: Expanded map to include all fields from the modal 
    const clientKeyToHeaderMap = {
        'StreetAddress': 'STREET', 'City': 'CITY', 'StateAbbreviated': 'STATE_ABBR',
        'ZipFormatted': 'ZIP_FORMATTED',
        'OutfitUnavailableNotes': 'UNAVAILABLE_NOTES',
        'GeneralNotes': 'GENERAL_NOTES',
        'OutfitOrdered': 'OUTFIT_ORDERED',
        'OutfitsRawOriginal': 'OUTFITS_RAW_ORIGINAL',
        'Contact' : 'CONTACT', 'Email': 'EMAIL', 'Owner': 'OWNER', 'INSEAM': 'INSEAM',
        'FulfillmentStatus': 'FULFILLMENT_STATUS', 'OrderIssue': 'ORDER_ISSUE',
        'OMS_ID': 'OMS_ID', 'OMS_Cost': 'OMS_COST', 'DateOrdered': 'DATE_ORDERED',
        'Swap': 'SWAP'
    };

    for (const clientKey in orderDataFromClient) {
        let sheetHeaderNameForKey = null;
        const mappedOrdersColKey = clientKeyToHeaderMap[clientKey];
        if (mappedOrdersColKey && ORDERS_COL[mappedOrdersColKey]) {
            sheetHeaderNameForKey = headers[ORDERS_COL[mappedOrdersColKey] - 1];
        }

        if (sheetHeaderNameForKey) {
            const colIndexZeroBased = headers.indexOf(sheetHeaderNameForKey);
            if (colIndexZeroBased !== -1) {
                let valueToSet = orderDataFromClient[clientKey];
                
                // ADDED: Logic to handle date string from client 
                if (sheetHeaderNameForKey === headers[ORDERS_COL.DATE_ORDERED - 1] && valueToSet && typeof valueToSet === 'string') {
                    try {
                        let parsedDate = new Date(valueToSet.replace(/-/g, '/')); // More lenient parsing
                        if (!isNaN(parsedDate.getTime())) {
                            valueToSet = parsedDate;
                        } else {
                            valueToSet = (valueToSet === "") ? "" : null; // Clear if invalid and not empty
                        }
                    } catch (e) {
                        valueToSet = (valueToSet === "") ? "" : null;
                    }
                }
                
                updatesToApply[colIndexZeroBased] = valueToSet;
            }
        }
    }

    // Update Last Updated timestamp
    const lastUpdatedColIdx = headers.indexOf("LastUpdated");
    if (lastUpdatedColIdx !== -1) {
        updatesToApply[lastUpdatedColIdx] = new Date();
    }
    
    if (Object.keys(updatesToApply).length > 0) {
        const targetRowRange = histOrdersSheet.getRange(actualSheetRowIndex, 1, 1, headers.length);
        const currentRowValues = targetRowRange.getValues()[0];
        const newRowValues = currentRowValues.map((originalCellVal, cellIdxZeroBased) => {
            return updatesToApply.hasOwnProperty(cellIdxZeroBased) ? updatesToApply[cellIdxZeroBased] : originalCellVal;
        });
        targetRowRange.setValues([newRowValues]);
        SpreadsheetApp.flush();
        return { success: true, message: "Historical order updated successfully." };
    } else {
        return { success: true, message: "No changes detected." };
    }

  } catch (e) {
    Logger.log(`HIST_VIEWER: Error updating historical order ${orderDataFromClient.OrderID}: ${e.message}`);
    return { success: false, message: `Update error: ${e.message}` };
  } finally {
    if (lockAcquired) {
        lock.releaseLock();
    }
  }
}

function generateHistoricalCsvData(collectionName, filters = {}) {
   if (!histOrdersSheet) { return "Error: Historical Orders sheet not found.";
   }
   try {
       const result = getHistoricalFilteredOrders(collectionName, filters, 1, 50000);
       // High limit for export
       if (result.error) throw new Error(result.error);
       const dataToExport = result.orders;
       if (!dataToExport?.length) return "No data found matching filters for CSV.";
       
       const headers = dataToExport.length > 0 ? Object.keys(dataToExport[0]) : [];
       if (headers.length === 0) return "No data headers found for CSV.";
       
       let csv = headers.join(',') + "\r\n";
       dataToExport.forEach(obj => {
           csv += headers.map(header => {
               let value = obj[header] ?? "";
               let cell = value.toString();
               if (cell.includes(',') || cell.includes('"') || cell.includes('\n')) { 
                   cell = '"' + 
                   cell.replace(/"/g, '""') + '"';
               }
               return cell;
           }).join(',') + "\r\n";
       });
       return csv;
   } catch (e) {
       Logger.log(`HIST_VIEWER: Error generating historical CSV for ${collectionName}: ${e.message}`);
       return `Error generating CSV: ${e.message}`;
   }
}

// Keep existing inventory and utility functions as they are needed
function getHistoricalInventoryByCollection(collectionName) {
  if (!histInventorySheet) { initializeGlobalSheetHandles_Historical();
  if(!histInventorySheet){ Logger.log('HIST_VIEWER: Inventory sheet not initialized for collection view.'); return [];
  }}
  if (!collectionName) { Logger.log('HIST_VIEWER: Collection name required for inventory.'); return [];
  }
  try {
    const prodCats = getHistoricalProductCategories();
    const invData = histInventorySheet.getDataRange().getValues();
    const invHeadersRaw = invData[0];
    if (!invHeadersRaw || invHeadersRaw.length === 0) { Logger.log("HIST_VIEWER: Inventory sheet is empty or has no headers."); return [];
    }
    const invHeaders = invHeadersRaw.map(h => String(h || "").trim());
    const idx = {};
    let headersValid = true;
    for (const key in INV_HEADERS) {
        const headerName = INV_HEADERS[key];
        const colIndex = invHeaders.indexOf(headerName);
        if (colIndex === -1) {
            Logger.log(`HIST_VIEWER: Inventory Header '${headerName}' (key: ${key}) not found. Headers: ${invHeaders.join(', ')}`);
            if (['COLLECTION', 'OUTFIT_NAME', 'PROD_NAME'].includes(key.toUpperCase())) headersValid = false;
        }
        idx[key] = colIndex;
    }
    if (!headersValid) {
        Logger.log("HIST_VIEWER: Critical columns missing in Historical Inventory. Cannot proceed.");
        throw new Error("Critical column(s) missing in Historical Inventory headers.");
    }
    const outfits = {};
    invData.slice(1)
      .filter(r => idx.COLLECTION > -1 && String(r[idx.COLLECTION] || "").trim() === collectionName)
      .forEach(r => {
        const oName = String(r[idx.OUTFIT_NAME]).trim();
        if (!oName || !r[idx.PROD_NAME]) return;
        if (!outfits[oName]) {
          outfits[oName] = {
            name: oName, imageUrl: idx.IMAGE_URL > -1 && r[idx.IMAGE_URL] ? String(r[idx.IMAGE_URL]).trim() : '',
            isActive: 
            idx.IS_ACTIVE > -1 ? (r[idx.IS_ACTIVE] === true) : false,
            pieces: []
          };
       }
        const pName = String(r[idx.PROD_NAME]).trim(); let etaDate = idx.ETA > -1 ? r[idx.ETA] : '';
        if (etaDate instanceof Date) { etaDate = Utilities.formatDate(etaDate, historicalSS.getSpreadsheetTimeZone(), "yyyy-MM-dd");
       
         }
        outfits[oName].pieces.push({
    
           productName: pName,
     
           category: prodCats[pName] || 'Unknown', sku: idx.PROD_SKU > -1 && r[idx.PROD_SKU] ? String(r[idx.PROD_SKU]).trim() : '',
          color: idx.COLOR > -1 && r[idx.COLOR] ? String(r[idx.COLOR]).trim() : '',
          availableSizes: idx.AVAIL_SIZES > -1 && r[idx.AVAIL_SIZES] ? String(r[idx.AVAIL_SIZES]).split(',').map(s => s.trim()).filter(s => s) : [],
          eta: etaDate || ''
        });
    });
    for (const oN in outfits) { outfits[oN].pieces.sort((a, b) => (a.sequence || 999) - (b.sequence || 999));
    }
    return Object.values(outfits).sort((a, b) => (a.name || "").localeCompare(b.name || ""));
  } catch (e) {
    Logger.log(`HIST_VIEWER: Error reading Historical Inventory for ${collectionName}: ${e.message}\n${e.stack}`);
    return [];
  }
}
function getImageData_Historical(fileId) {
  if (!fileId || typeof fileId !== 'string' || fileId.trim() === "") {
    Logger.log("HIST_VIEWER: getImageData_Historical - No valid File ID provided.");
    return null;
  }
  if (!/^[a-zA-Z0-9_-]+$/.test(fileId)) {
      Logger.log(`HIST_VIEWER: getImageData_Historical - Invalid File ID format: "${fileId}"`);
      return null;
  }
  try {
    const file = DriveApp.getFileById(fileId);
    const blob = file.getBlob();
    return { base64: Utilities.base64Encode(blob.getBytes()), mimeType: blob.getContentType() };
  } catch (err) {
    Logger.log(`HIST_VIEWER: Error getting image data (Historical) for ID "${fileId}": ${err.message}. Details: ${err.toString()}.`);
    return null;
  }
}
function getHistoricalProductCategories() {
    if (!histProductsSheet) { return {};
    }
    const cacheKey = 'historicalProductCategories_v3'; const cached = scriptCache.get(cacheKey);
    if (cached) { try { return JSON.parse(cached);
    } catch(e){ /* ignore */ } }
    const cats = {};
    try {
        const data = histProductsSheet.getDataRange().getValues();
        if (data.length <=1) return {};
        const headers = data[0].map(h => String(h || "").trim().toLowerCase());
        const nameCol = headers.indexOf("productname");
        const catCol = headers.indexOf("category");
        if (nameCol > -1 && catCol > -1) {
            data.slice(1).forEach(r => {
                const productName = String(r[nameCol] || "").trim();
                if (productName) { cats[productName] = String(r[catCol] || "").trim() || 'Unknown'; }
            });
            if (Object.keys(cats).length > 0) { scriptCache.put(cacheKey, JSON.stringify(cats), CACHE_EXPIRATION_SECONDS * 2);
            }
        }
    } catch (e) { Logger.log(`HIST_VIEWER: Error reading Historical Products for cats: ${e.message}`);
    }
    return cats;
}
